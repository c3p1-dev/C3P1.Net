@page "/admin/users"

@inject IUserAdminService UserAdminService

@rendermode InteractiveServer

<AuthorizeView Roles="Admin">
    <Authorized>
        <PageTitle>Manage users</PageTitle>
        <Heading Size="HeadingSize.Is3">Manage users</Heading>
        <Divider />
        <ListView TItem="ApplicationUser"
                    Data="@Userlist"
                    TextField="(item) => item.Email"
                    ValueField="(item) => item.Id.ToString()"
                    MaxHeight="500px">

            <ItemTemplate Context="data">
                <Div Flex="Flex.InlineFlex.JustifyContent.Between" Width="Width.Is100">
                    <Heading Size="HeadingSize.Is4" Margin="Margin.Is2.FromBottom">@data.Text</Heading>
                    <Buttons>
                        @if (data.Item.Email != username)
                        {
                            @if (UserAdminService.IsAdminAsync(data.Item).Result == true)
                            {
                                <Button Size="Size.Small" Clicked="@(async () => await MakeRegular(data.Item))" Color="Color.Warning">
                                    <Icon Name="IconName.ChevronDown" />
                                </Button>
                            }
                            else
                            {
                                <Button Size="Size.Small" Clicked="@(async () => await MakeAdmin(data.Item))" Color="Color.Primary">
                                    <Icon Name="IconName.ChevronUp" />
                                </Button>
                            }
                            <Button Color="Color.Danger" Clicked="@(() => ShowModal(data.Item))" Size="Size.Small">
                                <Icon Name="IconName.Ban" />
                            </Button>
                        }
                    </Buttons>
                </Div>
                <Paragraph TextColor="TextColor.Dark" Margin="Margin.Is2.FromBottom">
                    @if (UserAdminService.IsAdminAsync(data.Item).Result == true)
                    {
                        <Badge Color="Color.Warning">Admin</Badge>
                    }
                    else
                    {
                        <Badge Color="Color.Primary">User</Badge>
                    }

                    @if (data.Item.EmailConfirmed == true)
                    {
                        <Badge Color="Color.Success" Margin="Margin.Is1.FromStart">Verified email</Badge>
                    }
                    else
                    {
                        <Badge Color="Color.Warning" TextColor="TextColor.Dark" Margin="Margin.Is1.FromStart">Unverified email</Badge>
                    }
                </Paragraph>
            </ItemTemplate>
        </ListView>
    </Authorized>

    <NotAuthorized>
        <ErrAuth ErrorMessage="ErrAuth.ErrorType.MustBeAdmin"/>
    </NotAuthorized>
</AuthorizeView>

<Modal @ref="modalRef">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>Confirm delete</ModalTitle>
            <CloseButton Clicked="@HideModal" />
        </ModalHeader>
        <ModalBody>
            <Paragraph>
                Are you sure you want to delete <strong>@selectedUser.Email</strong> registration ?
            </Paragraph>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Cancel</Button>
            <Button Color="Color.Danger" Clicked="@(async () => await DeleteUser(selectedUser))">Confirm</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;
    private string? username = null;

    // Lists of admin users and regular users (filled in OnInitializedAsync() )
    private List<ApplicationUser>? Userlist;

    private ApplicationUser selectedUser = new ApplicationUser();
    private Modal? modalRef;

    protected override async Task OnInitializedAsync()
    {
        // get username
        var user = (await authenticationStateTask).User;
        if (user.Identity is not null)
        {
            if (user.Identity.IsAuthenticated)
            {
                username = user.Identity.Name;
            }
        }

        // Load data
        await DataChanged();

        // finish init
        await base.OnInitializedAsync();
    }

    private void ShowModal(ApplicationUser user)
    {
        selectedUser = user;

        if (modalRef is not null)
        {
            modalRef.Show();
        }
    }

    private void HideModal()
    {
        selectedUser = new ApplicationUser();
        if (modalRef is not null)
        {
            modalRef.Hide();
        }
    }

    private async Task DeleteUser(ApplicationUser user)
    {
        await UserAdminService.DeleteUserAsync(user);
        await DataChanged();
        HideModal();
    }

    private async Task DataChanged()
    {
        var adminList = await UserAdminService.GetAdminUsersAsync();
        var userList = await UserAdminService.GetRegularUsersAsync();

        Userlist = adminList.Concat(userList).ToList();
    }

    private async Task MakeAdmin(ApplicationUser user)
    {
        await UserAdminService.MakeAdminAsync(user);
        await DataChanged();
    }

    private async Task MakeRegular(ApplicationUser user)
    {
        await UserAdminService.MakeRegularAsync(user);
        await DataChanged();
    }
}
