@page "/misc/demo"

@inject NavState Nav

@rendermode InteractiveServer

<PageTitle>C3P1.Net/Demo</PageTitle>

<Heading Size="HeadingSize.Is3">Components demo</Heading>
<Divider />

<CardGroup Margin="Margin.Is2.FromBottom">
    <Card Padding="Padding.Is2">
        <CardTitle Size="5">Buttons</CardTitle>
        <CardText>
            <Button Color="Color.Primary">Primary</Button>
            <Button Color="Color.Secondary">Secondary</Button>
            <Button Color="Color.Danger">Danger</Button>
            <Button Color="Color.Success">Success</Button>
            <Button Color="Color.Info">Info</Button>
            <Button Color="Color.Warning">Warning</Button>
            <Button Color="Color.Dark">Dark</Button>
            <Button Color="Color.Light">Light</Button>
            <Button Color="Color.Default">Default</Button>
            <Button Color="Color.Link">Link</Button>

        </CardText>
    </Card>
    <Card Padding="Padding.Is2">
        <CardTitle Size="5">Inputs</CardTitle>
        <CardText>
            <Div>
                <TextEdit>TextEdit</TextEdit>
            </Div>
            <Div>
                <MemoEdit>MemoEdit</MemoEdit>
            </Div>
            <Div>
                <NumericEdit TValue="int">NumericEdit (int)</NumericEdit>
            </Div>
            <Div>
                <NumericEdit TValue="double">NumericEdit (double)</NumericEdit>
            </Div>
        </CardText>
    </Card>
</CardGroup>
<CardGroup Margin="Margin.Is2.FromBottom">
    <Card Padding="Padding.Is2">
        <CardTitle Size="5">LineChart</CardTitle>
        <CardText>
            <Button Color="Color.Primary" Clicked="@(async () => await HandleRedraw())">Redraw</Button>
            <LineChart @ref="lineChart" TItem="double" />
        </CardText>
    </Card>
    <Card Padding="Padding.Is2">
        <CardTitle Size="5">BarChart</CardTitle>
        <CardText>
            <Button Color="Color.Primary" Clicked="@(async () => await HandleRedraw())">Redraw</Button>
            <Chart @ref="barChart" Type="ChartType.Bar" TItem="double" />
        </CardText>
    </Card>
</CardGroup>

@code {
    LineChart<double> lineChart = new();
    Chart<double> barChart = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    protected override void OnInitialized()
    {
        // NavState (breadcrumbs, etc) is Scoped, so it lives as long as our connection lives.
        // So when a new page is visited, we need to clear navigation to prevent breadcrumbs from bleed-over, etc.
        // This also makes the navbar invisible by default.
        Nav.SetBreadcrumbs(new List<Node>()
        {
            new Node {Text = "Home", Link = "" },
            new Node {Text = "Demo", Link = "misc/demo", Active = true }
        });
    }

    async Task HandleRedraw()
    {
        await lineChart.Clear();
        await lineChart.AddLabelsDatasetsAndUpdate(Labels, GetLineChartDataset());

        await barChart.Clear();
        await barChart.AddLabelsDatasetsAndUpdate(Labels, GetBarChartDataset());
    }

    LineChartDataset<double> GetLineChartDataset()
    {
        return new LineChartDataset<double>
            {
                Label = "# of randoms",
                Data = RandomizeData(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                Fill = true,
                PointRadius = 3,
                CubicInterpolationMode = "monotone",
            };
    }
    private BarChartDataset<double> GetBarChartDataset()
    {
        return new()
            {
                Label = "# of randoms",
                Data = RandomizeData(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                BorderWidth = 1
            };
    }

    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange", "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    List<double> RandomizeData()
    {
        var r = new Random(DateTime.Now.Millisecond);

        return new List<double> {
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble() };
    }
}
