@using Blazorise.Utilities
@using Microsoft.AspNetCore.Components

@inherits BaseComponent

@*
    LayoutSectionless component is an overload of Blazorise Layout component
    <section> are replaced by <div> to pass W3C standard : <main> should not be inside a <section>
*@

<CascadingValue Value="@this" IsFixed>
    <div @ref="@ElementRef" id="@ElementId" class="@ClassNames" style="@StyleNames" @attributes="@Attributes">
        @if ( Loading )
        {
            @if ( LoadingTemplate is not null )
            {
                @LoadingTemplate
            }
            else
            {
                <div class="@LoadingClassNames"></div>
            }
        }
        @ChildContent
    </div>
</CascadingValue>

@code{
    private bool sider;
    private bool loading;
    private string loadingClass;

    public LayoutSectionless()
    {
        LoadingClassBuilder = new(BuildLoadingClasses);

        if (loadingClass is null)
        {
            loadingClass = "";
        }
    }

    /// <inheritdoc/>
    protected override void BuildClasses(ClassBuilder builder)
    {
        builder.Append(ClassProvider.Layout());
        builder.Append(ClassProvider.LayoutHasSider(), Sider);
        builder.Append(ClassProvider.LayoutRoot(), ParentLayout is null);

        base.BuildClasses(builder);
    }

    /// <summary>
    /// Builds the classnames for a loading container.
    /// </summary>
    /// <param name="builder">Class builder used to append the classnames.</param>
    protected void BuildLoadingClasses(ClassBuilder builder)
    {
        builder.Append(ClassProvider.LayoutLoading(), string.IsNullOrEmpty(LoadingClass));
        builder.Append(LoadingClass);
    }

    /// <inheritdoc/>


    /// <summary>
    /// Gets the class-names for a loading container.
    /// </summary>
    protected string LoadingClassNames => LoadingClassBuilder.Class;

    /// <summary>
    /// Loading container class builder.
    /// </summary>
    protected ClassBuilder LoadingClassBuilder { get; private set; }

    /// <summary>
    /// Indicates that layout will contain sider container.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Usage", "BL0007: Component parameter 'C3P1.Net.Components.Layout.LayoutSectionless.Sider' should be auto property", Justification = "Not pertinent")]
    [Parameter]
    public bool Sider
    {
        get => sider;
        set
        {
            sider = value;

            DirtyClasses();
        }
    }

    /// <summary>
    /// If true, an overlay will be created so the user cannot click anything until set to false.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Usage", "BL0007: Component parameter 'C3P1.Net.Components.Layout.LayoutSectionless.Loading' should be auto property", Justification = "Not pertinent")]
    [Parameter]
    public bool Loading
    {
        get => loading;
        set
        {
            loading = value;

            DirtyClasses();
        }
    }

    /// <summary>
    /// Sets the custom classname for loading element.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Usage", "BL0007: Component parameter 'C3P1.Net.Components.Layout.LayoutSectionless.LoadingClass' should be auto property", Justification = "Not pertinent")]
    [Parameter]
    public string LoadingClass
    {
        get => loadingClass;
        set
        {
            loadingClass = value;

            DirtyClasses();
        }
    }

    /// <summary>
    /// Occurs when loading state had changed.
    /// </summary>
    [Parameter] public EventCallback<bool> LoadingChanged { get; set; }

    /// <summary>
    /// Specifies the content to be rendered the loading container.
    /// </summary>
    [Parameter] public RenderFragment? LoadingTemplate { get; set; }

    /// <summary>
    /// Specifies the content to be rendered inside this <see cref="Layout"/>.
    /// </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Cascaded <see cref="Layout"/> component in which this <see cref="Layout"/> is placed.
    /// </summary>
    [CascadingParameter] protected Layout? ParentLayout { get; set; }
}