@inject IAppConfigService AppConfig
@inject IJSRuntime JS

@rendermode InteractiveServer

<Bar @bind-Visible="@topbarVisible" Breakpoint="Breakpoint.Desktop" Style="background: darkslateblue;" Shadow="Shadow.Default" ThemeContrast="ThemeContrast.Dark" Padding="Padding.Is2">
    <BarBrand Margin="Margin.Is1">
        <BarItem>
            <AuthorizeView>
                <Authorized>
                    <Badge Color="Color.Primary">@context.User.Identity?.Name</Badge>
                </Authorized>
                <NotAuthorized>
                    <Badge Color="Color.Secondary">public access</Badge>
                </NotAuthorized>
            </AuthorizeView>
        </BarItem>
    </BarBrand>
    <AuthorizeView>
        <BarToggler />
        <BarMenu>
            <BarStart>
                @* TODO : insert NavBreadcrumb here *@
            </BarStart>
            <BarEnd>
                <BarItem>
                    <BarDropdown RightAligned>
                        <BarDropdownToggle><Icon Name="IconName.Palette" /> Theme</BarDropdownToggle>
                        <BarDropdownMenu Style="padding: 15px; min-width:250px;" >
                            @if(themeMode == "light")
                            {
                                <BarDropdownItem Background="Background.Primary">
                                    <BarLink TextColor="TextColor.Light" Clicked="LightMode">Light mode</BarLink>
                                </BarDropdownItem>
                                <BarDropdownItem>
                                    <BarLink TextColor="TextColor.Primary" Clicked="DarkMode">Dark mode</BarLink>
                                </BarDropdownItem>
                            }
                            else if (themeMode == "dark")
                            {
                                <BarDropdownItem>
                                    <BarLink TextColor="TextColor.Primary" Clicked="LightMode">Light mode</BarLink>
                                </BarDropdownItem>
                                <BarDropdownItem Background="Background.Primary">
                                    <BarLink TextColor="TextColor.Light" Clicked="DarkMode">Dark mode</BarLink>
                                </BarDropdownItem>
                            }
                            <BarDropdownItem>
                                <BarLink TextColor="TextColor.Primary" Clicked="ToggleMode" Color="Color.Primary">Switch mode</BarLink>
                            </BarDropdownItem>
                        </BarDropdownMenu>
                    </BarDropdown>
                </BarItem>
            </BarEnd>
        </BarMenu>
    </AuthorizeView>
</Bar>

@code {
    [CascadingParameter] 
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

    private string? username = null;
    private string? themeMode = null;
    private bool topbarVisible = false;

    protected override async Task OnInitializedAsync()
    {
        // get username
        var user = (await authenticationStateTask).User;
        if (user.Identity is not null)
        {
            if (user.Identity.IsAuthenticated)
            {
                username = user.Identity.Name;
            }
        }

        // try to get current theme mode
        themeMode = await AppConfig.GetThemeModeAsync();

        // finish init
        await base.OnInitializedAsync();
    }

    async Task ToggleMode()
    {
        await JS.InvokeAsync<string>("togglemode");

        if (themeMode == "dark")
        {
            themeMode = "light";
        }
        else if (themeMode == "light")
        {
            themeMode = "dark";
        }

        if (themeMode is not null)
        {
            await AppConfig.SetThemeModeAsync(themeMode);
        }
    }

    async Task DarkMode()
    {
        themeMode = "dark";
        await AppConfig.SetThemeModeAsync(themeMode);
        await JS.InvokeAsync<string>("darkmode");
    }

    async Task LightMode()
    {
        themeMode = "light";
        await AppConfig.SetThemeModeAsync(themeMode);
        await JS.InvokeAsync<string>("lightmode");
    }

    async Task<string> GetMode()
    {
        return (await JS.InvokeAsync<string>("getmode"));
    }
}